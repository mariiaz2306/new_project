{"ast":null,"code":"// const INIT_STATE = {\n//     carts: []\n// }\n// export const cartReducer = (state = INIT_STATE, action) => {\n//     switch (action.type) {\n//         case \"ADD_TO_CART\":\n//             return {\n//                 ...state, carts: [...state.carts, action.payload]\n//             }\n//     case \"REMOVE_TO_CART\":\n//         const data=state.carts.filter((item)=>item.isbn !== action.payload)\n//         console.log(data);\n//         return{\n//             ...state,\n//             carts:data\n//         }\n\nimport { ADD_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../actions/action\";\n\n//         default:\n//             return state;\n//     }\n// }\n\nconst INITIAL_STATE = {};\nexport const cartReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    userId,\n    bookId,\n    quantity\n  } = action.payload; // Деструктуризация userId, bookId, quantity\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      const existingCart = state.carts[userId] || [];\n      const updatedCartAdd = [...existingCart, {\n        bookId,\n        quantity: 1\n      } // Используем bookId и начальное количество\n      ];\n\n      return {\n        ...state,\n        carts: {\n          ...state.carts,\n          [userId]: updatedCartAdd\n        }\n      };\n    case REMOVE_FROM_CART:\n      const updatedCartRemove = state.carts[userId].filter(item => item.bookId !== bookId);\n      return {\n        ...state,\n        carts: {\n          ...state.carts,\n          [userId]: updatedCartRemove\n        }\n      };\n    case UPDATE_CART_QUANTITY:\n      const updatedItems = state.carts[userId].map(item => item.bookId === bookId ? {\n        ...item,\n        quantity\n      } : item);\n      return {\n        ...state,\n        carts: {\n          ...state.carts,\n          [userId]: updatedItems\n        }\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ADD_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","INITIAL_STATE","cartReducer","state","action","userId","bookId","quantity","payload","type","existingCart","carts","updatedCartAdd","updatedCartRemove","filter","item","updatedItems","map"],"sources":["C:/Users/Mariiia/Desktop/react-ecomm-main/src/redux/reducer/cartReducer.js"],"sourcesContent":["// const INIT_STATE = {\n//     carts: []\n// }\n// export const cartReducer = (state = INIT_STATE, action) => {\n//     switch (action.type) {\n//         case \"ADD_TO_CART\":\n//             return {\n//                 ...state, carts: [...state.carts, action.payload]\n//             }\n//     case \"REMOVE_TO_CART\":\n//         const data=state.carts.filter((item)=>item.isbn !== action.payload)\n//         console.log(data);\n//         return{\n//             ...state,\n//             carts:data\n//         }\n\nimport { ADD_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../actions/action\";\n\n    \n//         default:\n//             return state;\n//     }\n// }\n\n\nconst INITIAL_STATE = {\n    \n}\nexport const cartReducer = (state = INITIAL_STATE, action) => {\n    const { userId, bookId, quantity } = action.payload; // Деструктуризация userId, bookId, quantity\n  \n    switch (action.type) {\n      case ADD_TO_CART:\n        const existingCart = state.carts[userId] || [];\n        const updatedCartAdd = [\n          ...existingCart,\n          { bookId, quantity: 1 }, // Используем bookId и начальное количество\n        ];\n        return {\n          ...state,\n          carts: {\n            ...state.carts,\n            [userId]: updatedCartAdd,\n          },\n        };\n  \n      case REMOVE_FROM_CART:\n        const updatedCartRemove = state.carts[userId].filter(\n          (item) => item.bookId !== bookId\n        );\n        return {\n          ...state,\n          carts: {\n            ...state.carts,\n            [userId]: updatedCartRemove,\n          },\n        };\n  \n      case UPDATE_CART_QUANTITY:\n        const updatedItems = state.carts[userId].map((item) =>\n          item.bookId === bookId ? { ...item, quantity } : item\n        );\n        return {\n          ...state,\n          carts: {\n            ...state.carts,\n            [userId]: updatedItems,\n          },\n        };\n  \n      default:\n        return state;\n    }\n  };\n  \n  \n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,EAAEC,gBAAgB,EAAEC,oBAAoB,QAAQ,mBAAmB;;AAGvF;AACA;AACA;AACA;;AAGA,MAAMC,aAAa,GAAG,CAEtB,CAAC;AACD,OAAO,MAAMC,WAAW,GAAG,YAAmC;EAAA,IAAlCC,KAAK,uEAAGF,aAAa;EAAA,IAAEG,MAAM;EACrD,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAGH,MAAM,CAACI,OAAO,CAAC,CAAC;;EAErD,QAAQJ,MAAM,CAACK,IAAI;IACjB,KAAKX,WAAW;MACd,MAAMY,YAAY,GAAGP,KAAK,CAACQ,KAAK,CAACN,MAAM,CAAC,IAAI,EAAE;MAC9C,MAAMO,cAAc,GAAG,CACrB,GAAGF,YAAY,EACf;QAAEJ,MAAM;QAAEC,QAAQ,EAAE;MAAE,CAAC,CAAE;MAAA,CAC1B;;MACD,OAAO;QACL,GAAGJ,KAAK;QACRQ,KAAK,EAAE;UACL,GAAGR,KAAK,CAACQ,KAAK;UACd,CAACN,MAAM,GAAGO;QACZ;MACF,CAAC;IAEH,KAAKb,gBAAgB;MACnB,MAAMc,iBAAiB,GAAGV,KAAK,CAACQ,KAAK,CAACN,MAAM,CAAC,CAACS,MAAM,CACjDC,IAAI,IAAKA,IAAI,CAACT,MAAM,KAAKA,MAAM,CACjC;MACD,OAAO;QACL,GAAGH,KAAK;QACRQ,KAAK,EAAE;UACL,GAAGR,KAAK,CAACQ,KAAK;UACd,CAACN,MAAM,GAAGQ;QACZ;MACF,CAAC;IAEH,KAAKb,oBAAoB;MACvB,MAAMgB,YAAY,GAAGb,KAAK,CAACQ,KAAK,CAACN,MAAM,CAAC,CAACY,GAAG,CAAEF,IAAI,IAChDA,IAAI,CAACT,MAAM,KAAKA,MAAM,GAAG;QAAE,GAAGS,IAAI;QAAER;MAAS,CAAC,GAAGQ,IAAI,CACtD;MACD,OAAO;QACL,GAAGZ,KAAK;QACRQ,KAAK,EAAE;UACL,GAAGR,KAAK,CAACQ,KAAK;UACd,CAACN,MAAM,GAAGW;QACZ;MACF,CAAC;IAEH;MACE,OAAOb,KAAK;EAAC;AAEnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}